# -*- coding:utf-8 -*-

'\n\xe4\xb8\xbb\xe8\xa6\x81\xe5\x8a\x9f\xe8\x83\xbd\xe5\xb0\xb1\xe6\x98\xaf\xe6\x89\xab\xe6\x8f\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9b\xae\xe5\xbd\x95 , \xe5\xb9\xb6\xe6\x8a\x8a\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x89\x80\xe6\x9c\x89python\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe5\xb1\x9e\xe4\xba\x8e\xe6\x8c\x87\xe5\xae\x9a\xe7\xb1\xbb\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe7\xb1\xbb\xe6\x89\xbe\xe5\x87\xba\xe6\x9d\xa5\n\xe6\x96\xb9\xe4\xbe\xbf\xe6\x88\x91\xe4\xbb\xac\xe6\x8a\x8a\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe7\x9a\x84entity\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xb3\xa8\xe5\x86\x8c\n'
import os

def _get_module_files(module_dir):
    module_name_set = set()
    try:
        files = os.listdir(module_dir)
    except:
        print 'error in generate_module_list for directory:', module_dir
        return ()
    for fileName in files:
        list = fileName.split('.')
        if (len(list) == 2):
            module_name = list[0]
            extension = list[1]
            if (extension in ('py', 'pyc', 'pyo')):
                module_name_set.add(module_name)
    module_name_set.discard('__init__')
    return module_name_set

def _get_module_list(module_dir):
    '\xe5\xbe\x97\xe5\x88\xb0\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8'
    module_name_set = _get_module_files(module_dir)
    module_list = []
    for moduleName in module_name_set:
        try:
            mod = __import__(moduleName, fromlist=[''])
            if mod:
                module_list.append(mod)
        except:
            print 'error in generate_module_list .', moduleName
            import traceback
            traceback.print_exc()
            continue
    return module_list

def _get_class_list(module, entity_base_class):
    '\xe5\xbe\x97\xe5\x88\xb0\xe6\xa8\xa1\xe5\x9d\x97\xe9\x87\x8c\xe9\x9d\xa2\xe6\x89\x80\xe6\x9c\x89\xe5\xb1\x9e\xe4\xba\x8e\xe6\x8c\x87\xe5\xae\x9a\xe7\xb1\xbb\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe7\xb1\xbb'
    class_list = []
    for name in dir(module):
        attr = getattr(module, name)
        if (isinstance(attr, type) and issubclass(attr, entity_base_class)):
            class_list.append(attr)
    return class_list

def scan_entity_classes(module_dir, entity_base_class):
    '\xe4\xb8\xbb\xe8\xa6\x81\xe5\x8a\x9f\xe8\x83\xbd\xe5\xb0\xb1\xe6\x98\xaf\xe6\x89\xab\xe6\x8f\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9b\xae\xe5\xbd\x95 , \xe5\xb9\xb6\xe6\x8a\x8a\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x89\x80\xe6\x9c\x89python\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\xad\xe5\xb1\x9e\xe4\xba\x8e\xe6\x8c\x87\xe5\xae\x9a\xe7\xb1\xbb\xe5\xad\x90\xe7\xb1\xbb\xe7\x9a\x84\xe7\xb1\xbb\xe6\x89\xbe\xe5\x87\xba\xe6\x9d\xa5'
    class_dict = {}
    for module in _get_module_list(module_dir):
        clist = _get_class_list(module, entity_base_class)
        for claz in clist:
            class_dict[claz.__name__] = claz
    return class_dict
