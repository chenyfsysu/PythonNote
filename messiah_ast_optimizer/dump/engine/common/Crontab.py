# -*- coding:utf-8 -*-

import sys
import time
import Timer

class Crontab(object, ):
    '\n\t\xe6\x94\xaf\xe6\x8c\x81Linux crontab\xe5\x91\xbd\xe4\xbb\xa4\xe8\xaf\xad\xe6\xb3\x95\xe7\x9a\x84\xe5\xae\x9a\xe6\x97\xb6\xe5\x99\xa8\xe3\x80\x82\n\t'
    TRIGGER_OFFSET = 5.1
    '\n\t\xe8\xae\xbe\xe7\xbd\xaeCrontab\xe7\x9a\x84\xe8\xa7\xa6\xe5\x8f\x91\xe7\x82\xb9\xe4\xb8\xba\xe6\xaf\x8f\xe5\x88\x86\xe9\x92\x9f\xe7\x9a\x845.1\xe7\xa7\x92\n\t\xe4\xb9\x8b\xe6\x89\x80\xe4\xbb\xa5\xe4\xb8\x8d\xe5\x9c\xa8\xe6\xaf\x8f\xe5\x88\x86\xe9\x92\x9f\xe7\x9a\x840\xe7\xa7\x92\xe8\xa7\xa6\xe5\x8f\x91\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe9\x97\xb4\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe5\xad\x98\xe5\x9c\xa8\xe7\xbb\x86\xe5\xbe\xae\xe5\xb7\xae\xe5\x88\xab\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9cCrontab\xe6\x89\x80\xe5\x9c\xa8\xe6\x97\xb6\xe9\x97\xb4\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x88\xb0\xe4\xba\x8600:00:00\xef\xbc\x8c\n\t\xe8\x80\x8c\xe6\x9c\x89\xe5\x8f\xa6\xe5\xa4\x96\xe7\x9a\x84\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe6\x97\xb6\xe9\x97\xb4\xe8\xbf\x98\xe5\x9c\xa8\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xe7\x9a\x8423:59:59\xe7\xa7\x92\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa2\xab\xe5\x9b\x9e\xe8\xb0\x83\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe9\x87\x8c\xe9\x9d\xa2\xe5\x8f\x88\xe6\x9c\x89\xe5\x8f\x96\xe5\x87\xba\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xe5\x88\xa4\xe6\x96\xad\xe5\xbd\x93\xe5\x89\x8d\xe5\xa4\xa9\xe7\x9a\x84\xe9\x80\xbb\xe8\xbe\x91\xef\xbc\x8c\xe5\xb0\xb1\xe4\xbc\x9a\n\t\xe5\xaf\xbc\xe8\x87\xb4\xe5\xa4\xa9\xe6\x95\xb0\xe8\xbf\x98\xe6\x98\xaf\xe5\x89\x8d\xe4\xb8\x80\xe5\xa4\xa9\xef\xbc\x8c\xe8\xbf\x98\xe4\xb8\x8d\xe6\x98\xaf\xe4\xbb\x8a\xe5\xa4\xa9\xe4\xba\x86\xe3\x80\x82\n\t'

    def __new__(klass, *args, **kwargs):
        if (not hasattr(klass, '_instance')):
            klass._instance = object.__new__(klass)
            klass._instance.init()
        return klass._instance

    def init(self):
        self.table = {}
        self.timer = 0
        self._frame_skipping_callback = None
        self.resetTimer()

    def stop(self):
        (self.timer and Timer.cancel_timer(self.timer))

    def register(self, rule, callback):
        '\n\t\t\xe6\xb3\xa8\xe5\x86\x8c\xe6\x96\xb0\xe7\x9a\x84\xe8\xa7\x84\xe5\x88\x99\xe3\x80\x82 \xe8\xa7\x84\xe5\x88\x99\xe8\xaf\xad\xe6\xb3\x95\xe5\x9f\xba\xe6\x9c\xac\xe4\xb8\x8eLinux crontab\xe8\xaf\xad\xe6\xb3\x95\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x88dayofweek\xe7\xa8\x8d\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x8c\xef\xbc\x89\xef\xbc\x8c\xe8\xaf\xa6\xe6\x83\x85\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n\t\tminute hour day month dayofweek\n\t\t* minute: \xe5\x88\x86\xe9\x92\x9f\xef\xbc\x8c\xe4\xbb\x8e 0 \xe5\x88\xb0 59 \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb4\xe6\x95\xb0\n\t\t* hour: \xe5\xb0\x8f\xe6\x97\xb6\xef\xbc\x8c\xe4\xbb\x8e 0 \xe5\x88\xb0 23 \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb4\xe6\x95\xb0\n\t\t* day: \xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x8c\xe4\xbb\x8e 1 \xe5\x88\xb0 31 \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x88\xe5\xa6\x82\xe6\x9e\x9c\xe6\x8c\x87\xe5\xae\x9a\xe4\xba\x86\xe6\x9c\x88\xe4\xbb\xbd\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe8\xaf\xa5\xe6\x9c\x88\xe4\xbb\xbd\xe7\x9a\x84\xe6\x9c\x89\xe6\x95\x88\xe6\x97\xa5\xe6\x9c\x9f\xef\xbc\x89\n\t\t* month: \xe6\x9c\x88\xe4\xbb\xbd\xef\xbc\x8c\xe4\xbb\x8e 1 \xe5\x88\xb0 12 \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb4\xe6\x95\xb0\n\t\t* dayofweek: \xe6\x98\x9f\xe6\x9c\x9f\xef\xbc\x8c\xe4\xbb\x8e 0 \xe5\x88\xb0 6 \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c0 \xe6\x98\xaf\xe6\x98\x9f\xe6\x9c\x9f\xe4\xb8\x80\n\n\t\t:param rule: \xe8\xa7\x84\xe5\x88\x99\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe3\x80\x82\n\t\t:type rule: str\n\t\t:param callback: \xe5\x88\xb0\xe6\x9c\x9f\xe7\x9a\x84\xe5\x9b\x9e\xe8\xb0\x83\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x82\n\t\t:type callback: function\n\t\t:retruns: \xe8\xa7\x84\xe5\x88\x99id\n\t\t:rtype: int\n\t\t'
        args = rule.split(' ')
        assert (len(args) == 5), ('Bad Crontab Rule %s' % rule)
        row = []
        for s in args:
            if (s == '*'):
                row.append(None)
                continue
            if ((len(s) >= 3) and (s[0] == '*') and (s[1] == '/')):
                row.append(set([(- int(s[2:]))]))
                continue
            try:
                num = int(s)
                row.append(set([num]))
                continue
            except ValueError:
                nums = s.split(',')
                v = set()
                for n in nums:
                    try:
                        v.add(int(n))
                    except ValueError:
                        ns = s.split('-')
                        v.update(range(int(ns[0]), (int(ns[1]) + 1)))
                row.append(v)
        self.table[id(row)] = (row, callback)
        return id(row)

    def unregister(self, rowid):
        self.table.pop(rowid)

    def setup_frame_skipping_callback(self, callback):
        self._frame_skipping_callback = callback

    def _checkCrontabs(self):
        t = time.localtime()
        t = [t[4], t[3], t[2], t[1], t[6]]
        if self._frame_skipping_callback:
            if (((t[0] - self._last_check_minute) % 60) > 1):
                self._frame_skipping_callback(self._last_check_minute)
            else:
                self._last_check_minute = t[0]
        for (row, callback) in self.table.values():
            match = True
            for (i, v) in enumerate(row):
                if (not v):
                    continue
                if (len(v) == 1):
                    v0 = tuple(v)[0]
                    if ((v0 < 0) and ((t[i] % v0) == 0)):
                        continue
                if (t[i] not in v):
                    match = False
                    break
            if match:
                try:
                    callback()
                except:
                    sys.excepthook(*sys.exc_info())

    def resetTimer(self):
        (Timer.is_repeat_timer(self.timer) and Timer.cancel_timer(self.timer))
        now = time.time()
        self._last_check_minute = time.localtime(now)[4]
        secondsToMinute = (((60 - now) + Crontab.TRIGGER_OFFSET) % 60)
        self.timer = Timer.addTimer(secondsToMinute, self._resetMinuteTimer).timerid

    def _resetMinuteTimer(self):
        (Timer.is_repeat_timer(self.timer) and Timer.cancel_timer(self.timer))
        self._checkCrontabs()
        self.timer = Timer.addRepeatTimer(60, self._checkCrontabs).timerid
