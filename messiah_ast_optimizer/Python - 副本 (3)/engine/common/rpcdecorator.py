# -*- coding:utf-8 -*-

from mobilelog.LogManager import LogManager
from RpcMethodArgs import Exposed
CLIENT_ONLY = 1
CLIENT_ANY = 2
SERVER_ONLY = 4
CLIENT_STUB = 8
CLIENT_SERVER = (CLIENT_ONLY | SERVER_ONLY)
ANY_SOURCES = (((CLIENT_ONLY | CLIENT_ANY) | SERVER_ONLY) | CLIENT_STUB)
CLIENT_EXPOSED = CLIENT_STUB
SERVER_EXPOSED = ((CLIENT_ONLY | CLIENT_ANY) | SERVER_ONLY)
EXPOSED_TO_CLIENT = (CLIENT_ONLY | CLIENT_ANY)
EXPOSED_TO_SERVER = (SERVER_ONLY | CLIENT_STUB)
ORDINARY_SERVER = 16
CROSS_SERVER = 32
ANY_SERVER = (ORDINARY_SERVER | CROSS_SERVER)
_logger = LogManager.get_logger('server.RpcMethod')

def rpc_call(func, parameters=None):
    args = []
    if parameters:
        if isinstance(parameters, list):
            parameters = {'__args': parameters}
        (('__args' in parameters) and parameters.update(dict(enumerate(parameters.pop('__args')))))
        for argtype in func.argtypes:
            argname = argtype.getname()
            args.append(argtype.convert(parameters[argname]))
    return func(*args)

def _auto_name_argtype(argtypes):
    n = 0
    for argtype in argtypes:
        if (argtype.name is None):
            argtype.name = n
            n += 1

def rpc_method(rpctype, *argtypes):
    '\n\tDecorator\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe5\xa3\xb0\xe6\x98\x8e\xe4\xb8\x80\xe4\xb8\xaaEntity\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xafRPC\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\xe8\xa2\xab\xe5\xa3\xb0\xe6\x98\x8e\xe4\xb8\xbaRPC\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe4\xbb\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\xa5\xe6\xad\xa3\xe5\xb8\xb8\xe6\x96\xb9\xe6\xb3\x95\xe5\x9c\xa8\xe6\x9c\xac\xe5\x9c\xb0\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\n\t:param rpctype: RPC\xe8\xb0\x83\xe7\x94\xa8\xe7\xb1\xbb\xe5\x9e\x8b\xe3\x80\x82\n\t:type rpctype: CLIENT_ONLY\xef\xbc\x88\xe4\xbb\x85\xe5\x85\x81\xe8\xae\xb8\xe6\x9c\xac\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe8\xaf\xa5\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x89, CLIENT_ANY\xef\xbc\x88\xe5\x85\x81\xe8\xae\xb8\xe4\xbb\xbb\xe6\x84\x8f\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe8\xaf\xa5\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x89\n\t\t, SERVER_ONLY\xef\xbc\x88\xe4\xbb\x85\xe5\x85\x81\xe8\xae\xb8\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe8\xaf\xa5\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x89, CLIENT_SERVER\xef\xbc\x88\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\xa4\xe4\xbb\xbb\xe4\xb8\x80\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe8\xaf\xa5\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x89\n\t:param argtypes: \xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe5\xa3\xb0\xe6\x98\x8e\xe8\xaf\xa5RPC\xe6\x96\xb9\xe6\xb3\x95\xe5\x90\x84\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xef\xbc\x88\xe5\x8f\xaf\xe7\xbc\xba\xe7\x9c\x81\xef\xbc\x89\xe5\x8f\x8a\xe7\xb1\xbb\xe5\x9e\x8b\xe3\x80\x82\n\t:type argtypes: :py:class:`engine.common.RpcMethodArgs.RpcMethodArg`\n\t'
    assert (not filter((lambda argtype: (not hasattr(argtype, 'convert'))), argtypes)), 'Bad argtype(s)'
    assert (rpctype in (CLIENT_ONLY, CLIENT_ANY, SERVER_ONLY, CLIENT_SERVER, CLIENT_STUB)), (str(type) + ': type must be one of (CLIENT_ONLY, CLIENT_ANY, SERVER_ONLY, CLIENT_SERVER)')
    if (rpctype & CLIENT_ANY):
        argtypes = ((Exposed(),) + argtypes)
    if (not (rpctype & ANY_SERVER)):
        rpctype ^= ORDINARY_SERVER
    _auto_name_argtype(argtypes)

    def _rpc_method(func):
        func.rpctype = rpctype
        func.argtypes = argtypes
        return func
    return _rpc_method

def is_rpc_method(func):
    '\n\t\xe5\x88\xa4\xe6\x96\xad\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xbaRPC\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\n\t:param func: \xe5\xbe\x85\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t:type func: function\n\t:returns: \xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xbaRPC\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t:rtype: bool\n\t'
    return hasattr(func, 'rpctype')

def is_not_exposed_to_client(func):
    '\n\t\xe5\x88\xa4\xe6\x96\xad\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x88\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xafRPC\xe4\xb8\x94\xe5\x8d\xb3rpctype\xe4\xb8\xbaCLIENT_ONLY, CLIENT_ANY\xe6\x88\x96CLIENT_SERVER\xef\xbc\x89\xe3\x80\x82\n\n\t:param func: \xe5\xbe\x85\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t:type func: function\n\t:returns: \xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\t:rtype: bool\n\t'
    return ((not hasattr(func, 'rpctype')) or (not (func.rpctype & EXPOSED_TO_CLIENT)))

def is_not_exposed_to_server(func):
    '\n\t\xe5\x88\xa4\xe6\x96\xad\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xef\xbc\x88\xe5\x8d\xb3\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xafRPC\xe4\xb8\x94rpctype\xe4\xb8\xbaSERVER_ONLY\xe6\x88\x96CLIENT_SERVER\xef\xbc\x89\xe3\x80\x82\n\n\t:param func: \xe5\xbe\x85\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t:type func: function\n\t:returns: \xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\t:rtype: bool\n\t'
    return ((not hasattr(func, 'rpctype')) or (not (func.rpctype & EXPOSED_TO_SERVER)))
from mobilecommon import COMPONENT
if (COMPONENT == 'Server'):
    from distserver.game import GameServerRepo

    def crosserver_forbidden(func):

        def _crosserver_forbidden(*args, **kwargs):
            if GameServerRepo.game_server.is_crossserver:
                raise RuntimeError(('Func %s Should Not Be Called on A Cross Server' % func.__name__))
            return func(*args, **kwargs)
        return _crosserver_forbidden

    def crosserver_only(func):

        def _crosserver_only(*args, **kwargs):
            if (not GameServerRepo.game_server.is_crossserver):
                raise RuntimeError(('Func %s Should Only Be Called on A Cross Server' % func.__name__))
            return func(*args, **kwargs)
        return _crosserver_only

    def is_exposed_rpc(func):
        '\n\t\t\xe5\x88\xa4\xe6\x96\xad\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8RPC\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\n\t\t:param func: \xe5\xbe\x85\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t\t:type func: function\n\t\t:returns: \xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8RPC\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\t\t:rtype: bool\n\t\t'
        return (is_rpc_method(func) and (func.rpctype & SERVER_EXPOSED))
else:

    def is_exposed_rpc(func):
        '\n\t\t\xe5\x88\xa4\xe6\x96\xad\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8RPC\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\n\t\t:param func: \xe5\xbe\x85\xe5\x88\xa4\xe6\x96\xad\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe3\x80\x82\n\t\t:type func: function\n\t\t:returns: \xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\x8d\xe5\x85\x81\xe8\xae\xb8\xe5\xa4\x96\xe9\x83\xa8RPC\xe8\xb0\x83\xe7\x94\xa8\xe3\x80\x82\n\t\t:rtype: bool\n\t\t'
        return (is_rpc_method(func) and (func.rpctype & CLIENT_EXPOSED))
